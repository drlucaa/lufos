{ host, pkgs, ... }:

let
  variables = import ../../../hosts/${host}/variables.nix;
  inherit (variables)
    stylixImage
    ;

  keybindsModule = import ./keybinds.nix {};
  windowrulesModule = import ./windowrules.nix {};
  layoutModule = import ./layout.nix {};
  startupModule = import ./startup.nix { inherit stylixImage; };

  
  hostOutputsPath = ./hosts/${host}/outputs.nix;
  hostOutputs =
    if builtins.pathExists hostOutputsPath then import hostOutputsPath { inherit host; } else "";
in

{
  # Install Niri and related packages
  home.packages = with pkgs; [
    niri
    udiskie
    xwayland-satellite
    swww
    grim
    slurp
    wl-clipboard
    swappy
  ];

  xdg.configFile."niri/config.kdl".text = ''
    // Niri Configuration for ${host}
    // Generated by NixOs configuration

    ${layoutModule}

    ${hostOutputs}

    ${keybindsModule}

    ${windowrulesModule}

    ${startupModule}

    environment {
      XDG_CURRENT_DESKTOP "niri"
      MOZ_ENABLE_WAYLAND "1"
      QT_QPA_PLATFORM "wayland"
      ELECTRON_OZONE_PLATFORM_HINT "wayland"
      QT_QPA_PLATFORMTHEME "gtk3"
      QT_QPA_PLATFORMTHEME_QT6 "gtk3"
      TERMINAL "ghostty"
      XCURSOR_THEME "Bibata-Modern-Ice"
      XCURSOR_SIZE "24"
    }

    hotkey-overlay {
        skip-at-startup
    }

    prefer-no-csd

    screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
  '';

  # XWayland satellite service for X11 app support
  systemd.user.services.xwayland-satellite = {
    Unit = {
      Description = "Xwayland outside Wayland";
      BindsTo = "graphical-session.target";
      After = "graphical-session.target";
    };
    Service = {
      Type = "notify";
      NotifyAccess = "all";
      ExecStart = "${pkgs.xwayland-satellite}/bin/xwayland-satellite";
      StandardOutput = "journal";
      Restart = "on-failure";
    };
    Install.WantedBy = [ "graphical-session.target" ];
  };

  # Place wallpapers in home directory
  home.file = {
    "Pictures/Wallpapers" = {
      source = ../../../wallpapers;
      recursive = true;
    };
  };
}
